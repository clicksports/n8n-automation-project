{
  "name": "Generate text comment for Jira issue",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=Du bist ein hilfsbereiter Bot im Bereich Kundenservice / IT-Support und kannst auf einen Index zugreifen, in dem alle offenen und kürzlich geschlossenen Jira-Vorgänge unserer Digitalagentur CLICKSPORTS gespeichert sind, mit denen wir unsere Aufgaben verwalten und die Kommunikation mit unseren Kunden und Partnern abwickeln. Wir haben keine Abteilungen und bevorzugen einen wenig förmlichen Kommunikationsstil ohne altmodische Formulierungen. Vermeide Wiederholungen, so dass ein und dasselbe Wort nicht auch noch im nächsten Satz vorkommt. Vermeide Floskeln wie: Wir haben festgestellt, schreibe lieber in der Ich-Form. Vermeide das Wort Problem, nutze hier lieber Thema. \n\nGehe vor allem auf die Bedenken und Ziele des Kunden ein um zu überzeugen den nächsten Schritt zu gehen. Fasse die verschiedenen Optionen noch einmal zusammen falls wir eine Entscheidung vom Kunden erwarten und es mehrere Optionen gibt.\n\nreporterName in den Metadaten ist der Name des Absenders.\n\nIm content steht Zusammenfassung und Beschreibung des Vorgangs sowie alle Kommentare, die mit dem Vorgang zu tun haben.\n\nAlle Vorgänge haben einen einzigartigen Vorgangsschlüssel, der als issuekey gespeichert ist. Alle Informationen mit demselben Issuekey gehören zu einem eindeutigen Vorgang, der vorrangig ein Thema behandelt. Wir nennen den Issuekey Vorgangsschlüssel.\n\nGeneriere bitte einen Text für eine E-Mail als Antwort auf den Vorgang {{ $json.body['issue.key'] }}.\nBeziehe nur Vorgänge in deine Recherche mit ein, die vom selben Absender sind.\n\nEs muss kein Betreff enthalten sein und als Absender benötigen wir keine Position. Im Text soll der Vorgangsschlüssel nicht erwähnt werden.\n\nZiel des Textes ist, weiter Richtung Lösung zu kommen: ein Angebot annehmen, eine Genehmigung für kostenpflichtigen Support erteilen oder eine Bestätigung einholen, dass das Thema gelöst ist.\n\nIst im Verlauf ersichtlich, dass wir schon länger als eine Woche auf Feedback warten, darf gerne eine freundliche Aufforderung kommen, dass wir Feedback brauchen, um bei dem Thema voranzukommen. Bei der Begrüßung in dem Fall gerne etwas schreiben, dass ich hoffe, dass es dem Empfänger gut geht. Wir wissen dass unsere Kunden sehr beschäftigt sind, manchmal geht aber auch eine Nachricht verloren oder wird übersehen und wir möchten sicherstellen, dass wir bei dem Thema gemeinsam voran kommen.\n\nDie Anrede für den Empfänger ist \"Hallo Vorname\", wenn wir in anderen Vorgängen per Du sind, ansonsten \"Hallo Frau Nachname\" oder \"Hallo Herr Nachname\" je nach Geschlecht. Wenn wir auf eine Antwort zurückschreiben, in der wir geduzt wurden, duzen wir auch.\n\nBeim Duzen ist die Verabschiedung:\n\n--\n\nViele Grüße,\n{{ $json.body['assignee.name'] }}\n\nBeim Siezen ist die Verabschiedung:\n\n--\n\nViele Grüße,\n{{ $json.body['assignee.name'] }} {{ $json.body['assignee.surname'] }}\n\n#gernperdu\n\nDer Hashtag soll in einer eigenen Zeile stehen genau wie die beiden Striche -- die dürfen auch nicht verändert werden weil sie die Signatur kennzeichnen."
      },
      "id": "94c66143-be56-42d7-aa5b-dc36ae5471c5",
      "name": "Question and Answer Chain",
      "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
      "typeVersion": 1.3,
      "position": [
        3220,
        1320
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "responseFormat": "text"
        },
        "requestOptions": {}
      },
      "id": "2841d1ae-9029-44f3-ac29-99c80d40b0de",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        3220,
        1540
      ],
      "credentials": {
        "openAiApi": {
          "id": "yiuOd1rh4VvrteZZ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "topK": 500,
        "requestOptions": {}
      },
      "id": "949649d0-bfe4-4bcc-830c-7b29cb17923d",
      "name": "Vector Store Retriever",
      "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
      "typeVersion": 1,
      "position": [
        3420,
        1540
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {},
        "requestOptions": {}
      },
      "id": "aa607c48-d530-46b9-a679-f0e2072404a4",
      "name": "Embeddings OpenAI3",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        3800,
        1900
      ],
      "credentials": {
        "openAiApi": {
          "id": "yiuOd1rh4VvrteZZ",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "1641784c-1be0-4d98-993b-039a01b99b5a",
        "responseMode": "lastNode",
        "responseData": "allEntries",
        "options": {}
      },
      "id": "61b84dec-2dc2-49d7-8097-f16a5707dbc6",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        2920,
        1340
      ],
      "webhookId": "1641784c-1be0-4d98-993b-039a01b99b5a"
    },
    {
      "parameters": {
        "pineconeIndex": {
          "__rl": true,
          "value": "n8n",
          "mode": "list",
          "cachedResultName": "n8n"
        },
        "options": {
          "pineconeNamespace": "issues",
          "metadata": {
            "metadataValues": [
              {
                "name": "issuekey",
                "value": "={{ $json.body['issue.key'] }}"
              }
            ]
          }
        }
      },
      "id": "5091a2d3-22fb-4143-9da7-f175e23d443f",
      "name": "Pinecone Vector Store3",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        3800,
        1680
      ],
      "credentials": {
        "pineconeApi": {
          "id": "JtVJ99Ey7P7QCuTI",
          "name": "PineconeApi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Retriever": {
      "ai_retriever": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "ai_retriever",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI3": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store3",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store3": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Retriever",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "da41d07f-7cf8-4fcc-9d5b-b3ddf481c1c9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "56fc812360391141cb9ac505c6be68147adf1858bd8b2dd9bdae3c3202be4a50"
  },
  "id": "hr1Zw4wwkn26RGNw",
  "tags": [
    {
      "createdAt": "2024-07-05T08:08:00.361Z",
      "updatedAt": "2024-07-05T08:08:00.361Z",
      "id": "PnvLO7jNQ3TYpmzx",
      "name": "rag"
    }
  ]
}