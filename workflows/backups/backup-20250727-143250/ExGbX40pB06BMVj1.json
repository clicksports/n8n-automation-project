{
  "createdAt": "2025-07-26T19:27:54.648Z",
  "updatedAt": "2025-01-26T00:00:00.000Z",
  "id": "ExGbX40pB06BMVj1",
  "name": "Shopware Optimized Vectorization Workflow (Fixed)",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "id": "a1b2c3d4-5e6f-7g8h-9i0j-1k2l3m4n5o6p",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Load and enhance dataset with embedded data (since fs module is not available)\nconst dataset = {\n  \"dataset_metadata\": {\n    \"version\": \"1.0\",\n    \"created\": \"2025-01-26\",\n    \"product_id\": \"022572-00\",\n    \"product_name\": \"Inuit Heizhandschuh\",\n    \"language\": \"de\",\n    \"total_chunks\": 3,\n    \"embedding_model\": \"text-embedding-3-large\",\n    \"chunk_strategy\": \"semantic_overlap\"\n  },\n  \"optimized_chunks\": [\n    {\n      \"chunk_id\": \"inuit_001_overview\",\n      \"content\": \"HELD Inuit Heizhandschuh (Art. 022572-00) - Premium beheizter Motorradhandschuh für extreme Winterbedingungen. Preis: 249,95 €. Aktuell nicht verfügbar. Kategorie: Touring-Handschuhe mit Membrane. Verfügbare Größen: 7, 8, 9, 10, 11, 12 (Standardgrößen). Farbe: schwarz. Hochwertige Verarbeitung mit 7,4V 3000 mAh Batteriesystem für zuverlässige Wärmeleistung.\",\n      \"metadata\": {\n        \"chunk_type\": \"product_overview\",\n        \"content_category\": \"basic_info\",\n        \"keywords\": [\"Preis\", \"Verfügbarkeit\", \"Größen\", \"Farbe\", \"Heizhandschuh\"],\n        \"customer_intents\": [\"product_inquiry\", \"price_check\", \"availability\", \"sizing\"],\n        \"confidence_score\": 0.95,\n        \"seasonal_relevance\": \"winter\",\n        \"technical_level\": \"basic\"\n      }\n    },\n    {\n      \"chunk_id\": \"inuit_002_heating_system\",\n      \"content\": \"Heizsystem: 7,4V 3000 mAh Lithium-Akku mit drei Heizstufen. TURBO (-70°C): Finger 2,5h, Handschuh 4,5h, Kombination 1,5h. HIGH (-50°C): Finger 4,0h, Handschuh 7,5h, Kombination 2,5h. LOW (-30°C): Finger 7,5h, Handschuh 11,0h, Kombination 4,0h. Separate Heizzonen für Finger und Handschuh steuerbar. Ladegerät inklusive.\",\n      \"metadata\": {\n        \"chunk_type\": \"technical_specifications\",\n        \"content_category\": \"heating_performance\",\n        \"keywords\": [\"Akku\", \"Heizstufen\", \"Laufzeit\", \"Temperatur\", \"Heizzonen\"],\n        \"customer_intents\": [\"battery_life\", \"heating_performance\", \"temperature_range\"],\n        \"confidence_score\": 0.98,\n        \"technical_level\": \"detailed\"\n      }\n    },\n    {\n      \"chunk_id\": \"inuit_003_materials\",\n      \"content\": \"Materialien: Oberhand aus hochwertigem Stretchgewebe für Flexibilität. Handfläche aus robustem Ziegenleder (farbecht und schweißbeständig). Futter: Oberhand mit Thermoplush Fleece und PRIMALOFT® Isolierung, Handfläche mit 3M™-Thinsulate™ Wärmefutter. Leder/Textil-Mix für optimale Balance zwischen Schutz und Komfort.\",\n      \"metadata\": {\n        \"chunk_type\": \"technical_specifications\",\n        \"content_category\": \"materials\",\n        \"keywords\": [\"Stretchgewebe\", \"Ziegenleder\", \"PRIMALOFT\", \"Thinsulate\", \"Materialien\"],\n        \"customer_intents\": [\"material_questions\", \"quality_inquiry\", \"durability\"],\n        \"confidence_score\": 0.96,\n        \"technical_level\": \"detailed\"\n      }\n    }\n  ]\n};\n\n// Function to generate frontend URL from product data\nfunction generateFrontendUrl(productName, articleNumber, baseUrl = 'https://shop.held.de') {\n  // Convert product name to URL-friendly format\n  // Remove special characters, replace spaces with hyphens, handle German umlauts\n  let urlName = productName\n    .replace(/ä/g, 'ae')\n    .replace(/ö/g, 'oe')\n    .replace(/ü/g, 'ue')\n    .replace(/ß/g, 'ss')\n    .replace(/Ä/g, 'Ae')\n    .replace(/Ö/g, 'Oe')\n    .replace(/Ü/g, 'Ue')\n    .replace(/[^a-zA-Z0-9\\s-]/g, '') // Remove special characters except spaces and hyphens\n    .replace(/\\s+/g, '-') // Replace spaces with hyphens\n    .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen\n    .replace(/^-|-$/g, ''); // Remove leading/trailing hyphens\n  \n  // Construct the URL following the pattern: baseUrl/Product-Name/article-number\n  const frontendUrl = `${baseUrl}/${urlName}/${articleNumber}`;\n  \n  console.log(`🔗 Generated frontend URL: ${frontendUrl}`);\n  return frontendUrl;\n}\n\nconsole.log('📁 Loading HELD Inuit Heizhandschuh optimized dataset...');\nconsole.log(`Product: ${dataset.dataset_metadata.product_name}`);\nconsole.log(`Article Number: ${dataset.dataset_metadata.product_id}`);\nconsole.log(`Version: ${dataset.dataset_metadata.version}`);\nconsole.log(`Total chunks: ${dataset.dataset_metadata.total_chunks}`);\n\nconst chunks = dataset.optimized_chunks || [];\nconst articleNumber = dataset.dataset_metadata.product_id;\nconst productName = dataset.dataset_metadata.product_name;\n\nif (chunks.length === 0) {\n  throw new Error('No chunks found in dataset');\n}\n\n// Generate frontend URL for this product\nconst frontendUrl = generateFrontendUrl(productName, articleNumber);\n\n// Return each chunk as a separate item with enhanced Shopware metadata\nreturn chunks.map((chunk, index) => ({\n  json: {\n    chunk_id: chunk.chunk_id,\n    content: chunk.content,\n    metadata: {\n      ...chunk.metadata,\n      // Shopware Integration Fields\n      article_number: articleNumber,\n      shopware_product_id: `sw_${articleNumber}`,\n      shopware_variant_id: `sw_var_${articleNumber}_${index.toString().padStart(3, '0')}`,\n      last_updated: new Date().toISOString(),\n      content_version: '2.0',\n      chunk_index: index,\n      \n      // Frontend URL Integration\n      frontend_url: frontendUrl,\n      shop_base_url: 'https://shop.held.de',\n      url_generated_at: new Date().toISOString(),\n      \n      // Product Hierarchy\n      brand: 'HELD',\n      category_path: 'Handschuhe > Touring-Handschuhe > mit Membrane',\n      product_line: 'Inuit',\n      \n      // Update Tracking\n      source_system: 'shopware',\n      sync_status: 'active',\n      price_currency: 'EUR',\n      stock_status: 'available',\n      \n      // Processing metadata\n      processed_at: new Date().toISOString(),\n      content_length: chunk.content.length,\n      embedding_model: 'text-embedding-3-large',\n      workflow_version: '2.1_shopware_optimized_with_frontend_url'\n    },\n    article_number: articleNumber,\n    chunk_index: index,\n    frontend_url: frontendUrl,\n    dataset_info: {\n      product_id: dataset.dataset_metadata.product_id,\n      product_name: dataset.dataset_metadata.product_name,\n      language: dataset.dataset_metadata.language,\n      embedding_model: dataset.dataset_metadata.embedding_model\n    }\n  }\n}));"
      },
      "id": "b2c3d4e5-6f7g-8h9i-0j1k-2l3m4n5o6p7q",
      "name": "Load & Enhance Dataset (Fixed)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "http://localhost:6333/collections/held_products_optimized",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 2,
            "retryInterval": 2000
          }
        }
      },
      "id": "c3d4e5f6-7g8h-9i0j-1k2l-3m4n5o6p7q8r",
      "name": "Delete Existing Collection",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        680,
        300
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "http://localhost:6333/collections/held_products_optimized",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "vectors",
              "value": "={\"size\": 3072, \"distance\": \"Cosine\"}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxRetries": 3,
            "retryInterval": 2000
          }
        }
      },
      "id": "d4e5f6g7-8h9i-0j1k-2l3m-4n5o6p7q8r9s",
      "name": "Create Optimized Collection",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate deterministic mock embeddings for testing\nconst item = $input.item(0).json;\n\nif (!item.content) {\n  throw new Error('No content to generate embeddings for');\n}\n\nconsole.log(`🔄 Generating mock embedding for chunk: ${item.chunk_id}`);\n\n// Generate deterministic mock embedding based on content\nfunction generateMockEmbedding(text, dimensions = 3072) {\n  // Simple hash-based deterministic embedding generation\n  let hash = 0;\n  for (let i = 0; i < text.length; i++) {\n    const char = text.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  \n  const embedding = [];\n  for (let i = 0; i < dimensions; i++) {\n    // Use hash and index to generate deterministic values\n    const seed = hash + i;\n    const value = (Math.sin(seed) * 10000) % 2 - 1; // Range -1 to 1\n    embedding.push(value);\n  }\n  \n  return embedding;\n}\n\nconst mockEmbedding = generateMockEmbedding(item.content);\n\nconsole.log(`✅ Generated mock embedding: ${mockEmbedding.length} dimensions`);\nconsole.log(`   Range: ${Math.min(...mockEmbedding).toFixed(3)} to ${Math.max(...mockEmbedding).toFixed(3)}`);\n\nreturn {\n  json: {\n    ...item,\n    embedding: mockEmbedding,\n    embedding_info: {\n      model: 'mock-deterministic',\n      dimensions: mockEmbedding.length,\n      generated_at: new Date().toISOString(),\n      fallback_used: true\n    }\n  }\n};"
      },
      "id": "e5f6g7h8-9i0j-1k2l-3m4n-5o6p7q8r9s0t",
      "name": "Generate Mock Embeddings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare optimized Qdrant points with deterministic IDs for upsert\nconst item = $input.item(0).json;\n\nif (!item.embedding || !Array.isArray(item.embedding)) {\n  throw new Error('No valid embedding found');\n}\n\nif (!item.chunk_id || !item.content) {\n  throw new Error('Missing required chunk data');\n}\n\n// Generate deterministic Point ID based on article number and chunk index\nfunction generateDeterministicPointId(articleNumber, chunkIndex) {\n  const idString = `${articleNumber}_${chunkIndex.toString().padStart(3, '0')}`;\n  let hash = 0;\n  for (let i = 0; i < idString.length; i++) {\n    const char = idString.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash;\n  }\n  // Ensure positive integer\n  return Math.abs(hash);\n}\n\nconst pointId = generateDeterministicPointId(item.article_number, item.chunk_index);\n\n// Prepare comprehensive payload for Shopware integration\nconst payload = {\n  chunk_id: item.chunk_id,\n  content: item.content,\n  metadata: item.metadata\n};\n\n// Create Qdrant point\nconst qdrantPoint = {\n  id: pointId,\n  vector: item.embedding,\n  payload: payload\n};\n\nconsole.log(`🔄 Preparing Qdrant point: ${pointId}`);\nconsole.log(`   Article: ${item.article_number}`);\nconsole.log(`   Chunk: ${item.chunk_id}`);\nconsole.log(`   Vector dimensions: ${item.embedding.length}`);\n\nreturn {\n  json: {\n    point: qdrantPoint,\n    article_number: item.article_number,\n    chunk_index: item.chunk_index,\n    summary: {\n      point_id: pointId,\n      chunk_type: item.metadata.chunk_type,\n      content_category: item.metadata.content_category,\n      article_number: item.article_number,\n      shopware_product_id: item.metadata.shopware_product_id\n    }\n  }\n};"
      },
      "id": "f6g7h8i9-0j1k-2l3m-4n5o-6p7q8r9s0t1u",
      "name": "Prepare Optimized Qdrant Points",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Collect all points for batch upload to Qdrant\nconst items = $input.all();\n\nif (!items || items.length === 0) {\n  throw new Error('No points to upload to Qdrant');\n}\n\nconst points = [];\nconst summaries = [];\nconst errors = [];\nlet articleNumber = null;\n\nitems.forEach((item, index) => {\n  try {\n    if (!item.json || !item.json.point) {\n      errors.push(`Item ${index}: Missing point data`);\n      return;\n    }\n    \n    const point = item.json.point;\n    const summary = item.json.summary;\n    \n    // Validate point structure\n    if (!point.id || !point.vector || !point.payload) {\n      errors.push(`Item ${index}: Invalid point structure`);\n      return;\n    }\n    \n    points.push(point);\n    summaries.push(summary);\n    \n    // Get article number from first valid item\n    if (!articleNumber && item.json.article_number) {\n      articleNumber = item.json.article_number;\n    }\n    \n  } catch (error) {\n    errors.push(`Item ${index}: ${error.message}`);\n  }\n});\n\nif (points.length === 0) {\n  throw new Error('No valid points could be prepared for upload');\n}\n\nconsole.log('📦 Collecting points for batch upload...');\nconsole.log(`✅ Prepared ${points.length} points for Qdrant`);\nconsole.log(`⚠️ ${errors.length} errors encountered`);\nconsole.log(`📋 Article Number: ${articleNumber}`);\n\nreturn {\n  json: {\n    points: points,\n    article_number: articleNumber,\n    batch_info: {\n      total_points: points.length,\n      total_errors: errors.length,\n      prepared_at: new Date().toISOString()\n    },\n    errors: errors\n  }\n};"
      },
      "id": "g7h8i9j0-1k2l-3m4n-5o6p-7q8r9s0t1u2v",
      "name": "Collect Points for Batch Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "http://localhost:6333/collections/held_products_optimized/points",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "points",
              "value": "={{ $json.points }}"
            }
          ]
        },
        "options": {
          "timeout": 60000,
          "retry": {
            "enabled": true,
            "maxRetries": 3,
            "retryInterval": 5000
          }
        }
      },
      "id": "h8i9j0k1-2l3m-4n5o-6p7q-8r9s0t1u2v3w",
      "name": "Upsert Product Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Generate final completion report\nconst upsertResult = $input.item(0).json;\nconst batchInfo = $node['Collect Points for Batch Upload'].json.batch_info;\nconst articleNumber = $node['Collect Points for Batch Upload'].json.article_number;\n\n// Check if upload was successful\nlet uploadSuccess = false;\nif (upsertResult && upsertResult.status === 'ok') {\n  uploadSuccess = true;\n}\n\nconst completionTime = new Date().toISOString();\n\n// Generate final report\nconst finalReport = {\n  workflow_status: 'completed',\n  completion_time: completionTime,\n  \n  workflow_summary: {\n    article_number: articleNumber,\n    collection_name: 'held_products_optimized',\n    workflow_version: '2.0_shopware_optimized_fixed'\n  },\n  \n  upload_summary: {\n    points_uploaded: batchInfo.total_points,\n    upload_errors: batchInfo.total_errors,\n    upload_success: uploadSuccess,\n    qdrant_response: upsertResult\n  },\n  \n  optimization_features: [\n    'Shopware-specific metadata enhancement',\n    'Deterministic point ID generation',\n    'Article number-based upsert functionality',\n    'Mock embedding generation for testing',\n    'Embedded dataset (no file system dependency)',\n    'Error handling and validation'\n  ],\n  \n  next_steps: [\n    'Integrate with real OpenAI embeddings API',\n    'Connect to live Shopware product data',\n    'Implement automated sync scheduling',\n    'Add monitoring and alerting',\n    'Scale for production workloads'\n  ]\n};\n\nconsole.log('🎉 ===== SHOPWARE VECTORIZATION COMPLETED =====');\nconsole.log(`📊 Article processed: ${finalReport.workflow_summary.article_number}`);\nconsole.log(`✅ Upload success: ${finalReport.upload_summary.upload_success}`);\nconsole.log(`📦 Points uploaded: ${finalReport.upload_summary.points_uploaded}`);\nconsole.log(`⏰ Completed at: ${completionTime}`);\nconsole.log('================================================');\n\nreturn [{ json: finalReport }];"
      },
      "id": "i9j0k1l2-3m4n-5o6p-7q8r-9s0t1u2v3w4x",
      "name": "Generate Completion Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        300
      ]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Load & Enhance Dataset (Fixed)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load & Enhance Dataset (Fixed)": {
      "main": [
        [
          {
            "node": "Delete Existing Collection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Existing Collection": {
      "main": [
        [
          {
            "node": "Create Optimized Collection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Optimized Collection": {
      "main": [
        [
          {
            "node": "Generate Mock Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Mock Embeddings": {
      "main": [
        [
          {
            "node": "Prepare Optimized Qdrant Points",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Optimized Qdrant Points": {
      "main": [
        [
          {
            "node": "Collect Points for Batch Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Collect Points for Batch Upload": {
      "main": [
        [
          {
            "node": "Upsert Product Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert Product Data": {
      "main": [
        [
          {
            "node": "Generate Completion Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "1",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2025-07-26T19:27:59.594Z",
      "id": "tag1",
      "name": "shopware"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2025-07-26T19:28:09.577Z",
      "id": "tag2",
      "name": "qdrant"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2025-07-26T19:40:12.623Z",
      "id": "tag3",
      "name": "vector-database"
    },
    {
      "createdAt": "2025-01-26T00:00:00.000Z",
      "updatedAt": "2025-07-26T19:40:12.625Z",
      "id": "tag4",
      "name": "best-version"
    }
  ]
}