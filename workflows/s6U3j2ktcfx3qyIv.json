{
  "createdAt": "2024-07-24T12:43:31.457Z",
  "updatedAt": "2024-07-24T12:43:31.457Z",
  "id": "s6U3j2ktcfx3qyIv",
  "name": "Index Confluence",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {
          "stripNewLines": true
        }
      },
      "id": "a212ab26-9804-4b83-86fc-5b74c2f93855",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        420,
        1440
      ],
      "credentials": {
        "openAiApi": {
          "id": "y8NvNd30QFsYf7Hw",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "chunkSize": 2500,
        "chunkOverlap": 100,
        "options": {}
      },
      "id": "6715c07f-5535-4b30-865a-a21cedc4437f",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        700,
        1660
      ]
    },
    {
      "parameters": {
        "content": "https://app.pinecone.io/organizations/-O0Pw_QbHmH05dWsaUEX/projects/de8f03c0-3faa-4e6e-a30c-2e834f4dd315/indexes/n8n/browser",
        "height": 123.61254232328483,
        "width": 348.09302325665226
      },
      "id": "64c41162-6bac-4378-9c2c-ef80d6182ac1",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -600,
        900
      ]
    },
    {
      "parameters": {
        "content": "https://clicksports.atlassian.net/issues/?filter=29253",
        "height": 80,
        "width": 282.9877088253423
      },
      "id": "94f559ed-088a-48b4-bc99-24ca61d7ffd0",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3900,
        720
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "issueKey": "={{ $json.key }}",
        "updateFields": {
          "customFieldsUi": {
            "customFieldsValues": [
              {
                "fieldId": {
                  "__rl": true,
                  "value": "customfield_14799",
                  "mode": "id"
                },
                "fieldValue": "={{ DateTime.now() }}"
              }
            ]
          }
        }
      },
      "id": "58356414-75c3-4024-a35d-8c6e76b1b85c",
      "name": "Set index timestamp",
      "type": "n8n-nodes-base.jira",
      "typeVersion": 1,
      "position": [
        1300,
        160
      ],
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "HlsaLdc6YFfeasWO",
          "name": "Jira christian.gick@clicksports.de"
        }
      }
    },
    {
      "parameters": {
        "resource": "issueComment",
        "operation": "getAll",
        "issueKey": "={{ $json.key }}",
        "returnAll": true,
        "options": {
          "expand": "renderedBody"
        }
      },
      "id": "4a1ebe9d-6bbf-4b3e-a0dc-f89483ebc74c",
      "name": "Get comments",
      "type": "n8n-nodes-base.jira",
      "typeVersion": 1,
      "position": [
        -3120,
        900
      ],
      "alwaysOutputData": true,
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "HlsaLdc6YFfeasWO",
          "name": "Jira christian.gick@clicksports.de"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "getAll",
        "options": {
          "expand": [],
          "fields": "summary,description,reporter,status",
          "jql": "filter=29253"
        }
      },
      "id": "e97e05ae-3495-4311-a346-6a65a9912079",
      "name": "Get issues to index",
      "type": "n8n-nodes-base.jira",
      "typeVersion": 1,
      "position": [
        -3680,
        520
      ],
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "HlsaLdc6YFfeasWO",
          "name": "Jira christian.gick@clicksports.de"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b408d9f-f53b-49d6-81ac-5b8f08ca72c3",
              "name": "renderedBody",
              "value": "={{ $json.author.displayName }} schreibt am {{ $json.created.toDateTime().format(\"dd.LL.yyyy\") }}: {{ $json.renderedBody }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "31620a09-48ea-4b4c-b72b-0e41963071f5",
      "name": "Match author with comments",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2680,
        880
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "comments",
        "options": {}
      },
      "id": "5cc610db-908c-4135-89f3-d955de0eb183",
      "name": "Split comments",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2160,
        900
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "comments"
            }
          ]
        },
        "options": {
          "mergeLists": true
        }
      },
      "id": "81eb078d-f75e-450c-a3eb-6440f986ee37",
      "name": "Aggregate clean comments",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -1920,
        900
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "renderedBody",
              "renameField": true,
              "outputFieldName": "comments"
            }
          ]
        },
        "options": {}
      },
      "id": "260f0f90-8bb8-4f84-a032-586923225371",
      "name": "Aggregate raw comments",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -2420,
        880
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "c5c7dda6-ae39-43e7-9c72-cd26faa1ce3d",
      "name": "Merge issue with its comments",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -1580,
        760
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "mergeByFields": {
          "values": [
            {
              "field1": "key",
              "field2": "metadata.issuekey"
            }
          ]
        },
        "options": {
          "multipleMatches": "first"
        }
      },
      "id": "80509936-042e-41b2-861f-8dcd2cf8ad8b",
      "name": "Indexed successfully",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        960,
        160
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "700ac1ff-4d6b-49e0-ba99-f688340e1547",
      "name": "Loop over issues",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -3400,
        760
      ]
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $('Vector model ticket').item.json.data[0].pageContent }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=issuekey",
                "value": "={{ $('Vector model ticket').item.json.data[0].metadata.issuekey }}"
              },
              {
                "name": "=name",
                "value": "={{ $('Vector model ticket').item.json.data[0].metadata.reporter.name }}"
              },
              {
                "name": "email",
                "value": "={{ $('Vector model ticket').item.json.data[0].metadata.reporter.email }}"
              },
              {
                "name": "status",
                "value": "={{ $('Vector model ticket').item.json.data[0].metadata.status }}"
              }
            ]
          }
        }
      },
      "id": "1a347f00-c625-41ac-93e9-9c33d7b5e8a7",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        700,
        1440
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "b54e6ca6-ed3e-4e97-a7c4-35297e80ed3a",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -240,
        660
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "073de083-fac8-4579-8110-3c7a14aab94b",
              "leftValue": "={{ $json.fields.description }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "a2365b95-bfbd-4dbd-8c64-93b5059bd2d8",
              "leftValue": "={{ $json.comments[0].length }}",
              "rightValue": 20,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "03dd52df-ad2d-416d-82b9-f7f9f7193fbf",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -1380,
        600
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "id": "2d565f41-a632-4c94-bc35-183496162b8f",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -4000,
        520
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8d02fb22-7c39-4ec4-b7de-19d8f8e0ef76",
              "leftValue": "={{ $json.renderedBody }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4a925b62-4052-4c1c-a6fe-2871f390943e",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -2900,
        900
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24ccedcb-2585-4873-972e-235489f7bdf4",
              "name": "fields.description",
              "value": "={{ $json.fields.description }}",
              "type": "string"
            },
            {
              "id": "082856d2-5f59-4b6f-ad0b-1a063b3246ba",
              "name": "fields.summary",
              "value": "={{ $json.fields.summary }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "857d6a35-511c-412e-94c5-5d11682cb16c",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -860,
        560
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-large",
        "options": {
          "stripNewLines": true
        }
      },
      "id": "f80f99ef-cdae-40a2-a6af-f5c1dd292331",
      "name": "Embeddings OpenAI3",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        200,
        620
      ],
      "credentials": {
        "openAiApi": {
          "id": "y8NvNd30QFsYf7Hw",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "chunkSize": 2500,
        "chunkOverlap": 100,
        "options": {}
      },
      "id": "27be5b30-8c1b-4e9e-8a89-9f57fa6654f7",
      "name": "Recursive Character Text Splitter1",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        520,
        840
      ]
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $('Vector model kb').item.json.data[0].pageContent }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=issuekey",
                "value": "={{ $('Vector model kb').item.json.data[0].metadata.issuekey }}"
              },
              {
                "name": "=name",
                "value": "={{ $('Vector model kb').item.json.data[0].metadata.reporter.name }}"
              },
              {
                "name": "email",
                "value": "={{ $('Vector model kb').item.json.data[0].metadata.reporter.email }}"
              },
              {
                "name": "status",
                "value": "={{ $('Vector model kb').item.json.data[0].metadata.status }}"
              }
            ]
          }
        }
      },
      "id": "c8ae3515-da24-4059-bb19-60039f8a237d",
      "name": "Default Data Loader1",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        480,
        620
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function extractText(text) {\n    // Remove specific JSON structures and unwanted fragments\n    let cleanedText = text\n        // Remove image placeholders\n        .replace(/!image001\\.png\\|thumbnail!{adf}>/g, '')\n        // Remove specific JSON structures\n        .replace(/{\"type\":\"(?:expand|paragraph|table)\",\"content\":\\[(?:\\{\"type\":\"(?:text|tableRow|tableCell|hardBreak)\",\"text\":\"[^\"]*\"\\},?)*\\]\\},?/g, '')\n        // Remove HTML tags\n        .replace(/<\\/?[^>]+(>|$)/g, '')\n        // Remove excessive whitespace\n        .replace(/\\n+/g, ' ')\n        .replace(/\\s+/g, ' ')\n        .replace(/[-_]{3,}/g, ' ')\n        .trim();\n    return cleanedText;\n}\n\nreturn {\n    json: { \"data\": [ {\n      \n        id: $json.key,\n        pageContent: $json.message.content.knowledgebase,\n        metadata: {\n            issuekey: $json.key\n        }\n    }\n                     ] }\n};\n\n"
      },
      "id": "7ce09ae9-9e2f-45b0-9c76-2ea1e30a1201",
      "name": "Vector model kb",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -20,
        320
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "n8n",
          "mode": "list",
          "cachedResultName": "n8n"
        },
        "options": {
          "clearNamespace": false,
          "pineconeNamespace": "kb"
        }
      },
      "id": "3e67c77f-a2e3-443d-a088-005c707ce0e4",
      "name": "Pinecone Vector Store3",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        300,
        320
      ],
      "credentials": {
        "pineconeApi": {
          "id": "8lDKmR3gvMj1szqg",
          "name": "Pinecone"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "function extractText(text) {\n    // Remove specific JSON structures and unwanted fragments\n    let cleanedText = text\n        // Remove image placeholders\n        .replace(/!image001\\.png\\|thumbnail!{adf}>/g, '')\n        // Remove specific JSON structures\n        .replace(/{\"type\":\"(?:expand|paragraph|table)\",\"content\":\\[(?:\\{\"type\":\"(?:text|tableRow|tableCell|hardBreak)\",\"text\":\"[^\"]*\"\\},?)*\\]\\},?/g, '')\n        // Remove HTML tags\n        .replace(/<\\/?[^>]+(>|$)/g, '')\n        // Remove excessive whitespace\n        .replace(/\\n+/g, ' ')\n        .replace(/\\s+/g, ' ')\n        .replace(/[-_]{3,}/g, ' ')\n        .trim();\n    return cleanedText;\n}\n\nreturn {\n    json: { \"data\": [ {\n      \n        id: $json.key,\n        pageContent: ($json.fields.summary ? $json.key + ': ' + $json.fields.summary : '') +\n                 ($json.fields.description ? ', ' + extractText($json.fields.description) : '') +\n                 ($json.comments && $json.comments.length > 0 ? ', ' + extractText($json.comments.join('\\n')) : ''),\n        metadata: {\n            issuekey: $json.key,\n            abstract: ($json.message.content.abstract ? $json.message.content.abstract : ''),\n            status: $json.fields.status.name,\n            reporter: {\n                name: $json.fields.reporter.displayName,\n                email: $json.fields.reporter.emailAddress\n            }\n        }\n    }\n                     ] }\n};\n\n"
      },
      "id": "45189dcc-9610-4af4-bc3b-aae9505b3645",
      "name": "Vector model ticket",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        200,
        1140
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Verwende Normalisierung und Lemmatisierung um unnötige Tags, Trennzeichen und Satzzeichen zu entfernen. Das Ergebnis soll optimal sein um später für Pinecone vektorisiert zu werden. Keine Kommentare von dir. Kein HTML, nur reiner Text. Aus der Signatur musst du nur den Firmennamen, die Rolle / Position des Senders, sowie die Telefonnummern und Mailadresse berücksichtigen. Eine Variable (abstract) zurückgeben nach dem Schema Von Absendername: Textkörper. Sender und message sollen nicht getrennt werden. \n\nGib zusätzlich eine zweite Variable zurück (knowledgebase) die aus dem Inhalt nur das übernimmt was öffentlich im Internet stehen darf und geeignet ist und auch für andere Kunden und Partner unseres Unternehmens relevant sein könnte. Es dürfen keinerlei Namen, personenbezogene Daten gespeichert werden oder solche, die auf das jeweilige Projekt oder die Firma unserer Kunden schließen lassen.\n\nDas ist die ursprüngliche Nachricht:\n{{ $json.fields.description }}\n\nUnd das hier sind alle Kommentare zwischen Sender und unserer Firma:\n{{ $json.comments.join(', ') }}",
              "role": "system"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "id": "859f805b-afea-49f8-bbb3-0ce86d4abc32",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        -700,
        440
      ],
      "credentials": {
        "openAiApi": {
          "id": "y8NvNd30QFsYf7Hw",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "n8n",
          "mode": "list",
          "cachedResultName": "n8n"
        },
        "options": {
          "clearNamespace": false,
          "pineconeNamespace": "issues"
        }
      },
      "id": "a0125b52-e783-4678-8bd6-f3480907d4a6",
      "name": "Pinecone Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        520,
        1140
      ],
      "credentials": {
        "pineconeApi": {
          "id": "8lDKmR3gvMj1szqg",
          "name": "Pinecone"
        }
      },
      "onError": "continueRegularOutput"
    }
  ],
  "connections": {
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Get comments": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get issues to index": {
      "main": [
        [
          {
            "node": "Indexed successfully",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge issue with its comments",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop over issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Match author with comments": {
      "main": [
        [
          {
            "node": "Aggregate raw comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split comments": {
      "main": [
        [
          {
            "node": "Aggregate clean comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate clean comments": {
      "main": [
        [
          {
            "node": "Loop over issues",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate raw comments": {
      "main": [
        [
          {
            "node": "Split comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge issue with its comments": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Indexed successfully": {
      "main": [
        [
          {
            "node": "Set index timestamp",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop over issues": {
      "main": [
        [
          {
            "node": "Merge issue with its comments",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Get comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Vector model ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get issues to index",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Match author with comments",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI3": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store3",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store3",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Vector model kb": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vector model ticket": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Vector model kb",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "main": [
        [
          {
            "node": "Indexed successfully",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "oXwbRnZHgYHUkKj4"
  },
  "staticData": {
    "node:Schedule Trigger": {
      "recurrencyRules": []
    }
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "3ffbbeac-dfa2-477e-a89f-8a137dc42a87",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2024-07-19T11:38:21.497Z",
      "updatedAt": "2024-07-19T11:38:21.497Z",
      "id": "R3f6NQ4V2TDyb09j",
      "name": "openai"
    },
    {
      "createdAt": "2024-07-19T11:40:04.689Z",
      "updatedAt": "2024-07-19T11:40:04.689Z",
      "id": "wNSc3sQpRZI8CPoy",
      "name": "pinecone"
    }
  ]
}