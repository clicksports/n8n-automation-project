services:
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-production
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_RUNNERS_ENABLED=true
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - NODE_ENV=production
      # PostgreSQL Configuration
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${DB_POSTGRESDB_HOST}
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=postgres
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - DB_POSTGRESDB_SSL_ENABLED=true
      # Additional PostgreSQL settings
      - DB_POSTGRESDB_POOL_SIZE=10
      - DB_POSTGRESDB_CONNECTION_TIMEOUT=30000
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_files:/home/node/.n8n/binaryData
      - ./workflows:/home/node/.n8n/workflows:ro
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - postgres-local
    env_file:
      - .env

  # Optional: Local PostgreSQL for development/testing
  postgres-local:
    image: postgres:15-alpine
    container_name: n8n-postgres-local
    restart: unless-stopped
    environment:
      - POSTGRES_DB=n8n_local
      - POSTGRES_USER=n8n_user
      - POSTGRES_PASSWORD=${POSTGRES_LOCAL_PASSWORD:-n8n_local_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migration_export/schema/complete_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - n8n-network
    profiles:
      - local-postgres

volumes:
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker
  n8n_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/docker/binaryData
  postgres_data:
    driver: local

networks:
  n8n-network:
    driver: bridge